Q) Why do we need URL shortening?
    URL shortening is used to create shorter aliases for long URLs. User is redirected to the longer URL when they hit these short URLs.
Short links saves a lot of space when displayed, printed, messaged or tweeted.

______________________________________
Requirements and Goals of the System :
--------------------------------------

*) Functional Requirements :
____________________________
    1. Given a URL, our service should generate a shorter and unique alias of it.
    2. When user access short links, our service should redirect them to the original links.
    3. User should optionally be able to pick a custom short links for their URLs.
    4. Links will expire after a standard default time-span. User should be able to specify the expiration time.

*) Non-functional Requirements :
________________________________
    1. The system should be highly available. This is required because, if our service is down, all the URL redirection
    will start failing.
    2. URL redirection should happen in real-time with minimal latency.
    3. Shortened links should not be guessable(predictable).

*) Extended Requirements :
__________________________
    1. Analytics e.g. how many times a redirection happened?
    2. Our service should also be accessible through REST APIs by other services.

_____________________________________
Capacity estimation and constraints :
-------------------------------------
    The system should be read-heavy. There will be lots of redirection requests compared to new URL shortenings.
Let's assume 100:1 read write ration.(read is redirection and write is shortening)

*) Traffic estimate :
_____________________
        Assuming, we will have 500 million new URL shortenings per month, with the ratio of 100:1, we can expect 50 billion
    redirections during the same period.
                500 million * 100 = 5 billion

        So, queries per seconds for our system will be
            For shortenings
                500 million / (30 days * 24 hours * 60 minutes * 60 seconds) = 200 URLs per seconds
            For redirections
                5 billion / (30 days * 24 hours * 60 minutes * 60 seconds) = 20K redirections per seconds

*) Storage estimate :
_____________________
        Let's assume we store every URL shortening request and the associated shortened links for 5 years. Since we expect
    to have 500 million new URL shortenings per month, the total no of objects we expect to store will be 30 billion.
            500 million * 5 years * 12 months = 30 billion
        Let's assume that each stored object is approximately 500 bytes. Then we will need 15TB of total storage.
            30 billion * 500 bytes = 15 TB

*) Bandwidth estimate :
_______________________
        For write requests since we expect 200 new URLs every seconds, total incoming data for our service will be 100KB
    per seconds.
            200 * 500 bytes = 100 KB/s
        For read requests, since every second we expect approx. 20K URL redirections, total outgoing data for our
    service would be 10 MB per seconds.
            20K * 500 bytes = 10 MB/s

*) Memory estimate :
____________________
        If we want to cache some of the hot URLs which are accessed frequently, with 80-20 rule meaning 20% of the URLs
    generate 80% of the traffic, we would like to cache these 20% hot URLs.
        Since we have 20K requests per second, we will be getting 1.7 billion requests per day.
                20K * 3600 seconds * 24 hours = ~1.7 billion
        To cache 20% of these requests, we will need 170GB of memory.
                0.2 * 1.7 billion * 500 bytes = ~170 GB
        One thing to note here is that some of the requests might be duplicate, i.e. for the same URLs. So, actually
    our total actual memory usage will be less than 170 GB.

_____________
System APIs :
-------------
    We can have REST or SOAP APIs to expose the functionality of our service. Following could be the definition of the
APIs for creating and deleting URLs.

1) Create :
___________
    createURL(api_key, original_url, custom_alias=false, user_name=none, expiry_date=none)

    a. api_key : The key for a registered account to prevent creation of shortened URL more than allocated quota.
    b. original_url : Origin URL to be shortened.
    c. custom_alias : Optional custom key for the URL.
    d. user_name : Optional user name to be used in the encoding.
    e. expiry_date : Optional expiration date for the shortened URL.

    This API returns the shortened URL upon successful operation, else return appropriate error code.

2) Delete :
___________
    deleteURL(api_key, original_url)

    a. api_key : Unique key to identify user.
    b. original_url : Original URL to be deleted

________________________________
Detecting and preventing abuse :
--------------------------------
    A malicious user can put us out of business by consuming all URL keys in the current design. To prevent abuse, we
can limit users vis their api_key. Each api_key can be limited to a certain no of URL creations and redirections per
some time period(which might be different for different api_keys).

_________________
Database Design :
-----------------
    A few observation about the nature of data we store.
        1. We need to store billions of records.
        2. Each object we store is small(less than 1KB).
        3. There are no relationships between records(other than storing which user created which URL).
        4. The service is read-heavy.

    Database Schema :
    -----------------
        We need to tables to store information about the URL mappings and user's data who created the short links.

                    ----------------------------
                    |           URL            |
                    ----------------------------
                    | PK | Hash : varchar(17)  |
                    ----------------------------
                    |    | URL : varchar(512)  |
                    |    | creation_date : date|
                    |    | expiration_date :   |
                    |    | date                |
                    |    | user_id : int       |
                    ----------------------------

                    ----------------------------
                    |           User           |
                    ----------------------------
                    | PK | id : int            |
                    ----------------------------
                    |    | name : varchar(20)  |
                    |    | email : varchar(30) |
                    |    | creation_date : date|
                    |    | last_login : date   |
                    |    |                     |
                    ----------------------------

What kind of database should we use?
    Since we anticipate storing billions of rows, and we don't need to use relationship between objects - a NoSQL store
like DynamoDB, Casandra, or Riak is better choice. Also a NoSQL choice would be easier to scale.

___________________________________
Basic System Design and Algorithm :
-----------------------------------
    For example the shorten URL is "http://www.abc.com/hg5rd4". The last 6 characters of this URL is the short key we
want to generate. We'll explore two solutions here.

1. Encoding actual URL :
------------------------
    We can compute an unique hash(MD5 or SHA256 etc) of the given URL.The hash can then be encoded for displaying. This
encoding could be base36 ([a-z, 0-9]) or base62 ([A-Z, a-z, 0-9]) and if we add '+' and '/' we can use Base64 encoding.
A reasonable question would be, what should be the length of the short key? 6, 8 or 10 characters?

    Using Base64 encoding, a 6 letters long key would result in 64^6 = ~68 billion possible strings
    Using Base64 encoding, a 8 letters long key would result in 64^8 = ~281 trillion possible strings
So, with 68B unique string, lets assume six letter keys would suffice for our system.

    If we use MD5 algorithm as our hash function, it will produce a 128-bit hash value. After Base64 encoding, we will
get a string having more than 21 characters(since each base64 character encodes 6 bit of the hash value). Now we only
have space for 8 characters per short key, then how to choose the key? We can take the first 6 (or 8) letters for the
key. This could result in key duplication, to resolve that, we can choose some other characters out of the encoding
string or swap some characters.

What are the different issues with our solution? We have the following couple of problems with our encoding scheme:

    If multiple users enter the same URL, they can get the same shortened URL, which is not acceptable.
What if parts of the URL are URL-encoded? e.g., http://www.educative.io/distributed.php?id=design,
and http://www.educative.io/distributed.php%3Fid%3Ddesign are identical except for the URL encoding.

    Workaround for the issues: We can append an increasing sequence number to each input URL to make it unique, and then
generate a hash of it. We don’t need to store this sequence number in the databases, though. Possible problems with this
approach could be an ever-increasing sequence number. Can it overflow? Appending an increasing sequence number will also
impact the performance of the service.

Another solution could be to append user id (which should be unique) to the input URL. However, if the user has not
signed in, we would have to ask the user to choose a uniqueness key. Even after this, if we have a conflict, we have
to keep generating a key until we get a unique one.

2. Generating keys offline :
----------------------------
   We can have a standalone Key Generation Service (KGS) that generates random six-letter strings beforehand and stores
them in a database (let’s call it key-DB). Whenever we want to shorten a URL, we will just take one of the
already-generated keys and use it. This approach will make things quite simple and fast. Not only are we not encoding
the URL, but we won’t have to worry about duplications or collisions. KGS will make sure all the keys inserted into
key-DB are unique.

   Can concurrency cause problems? As soon as a key is used, it should be marked in the database to ensure it doesn’t
get reuse. If there are multiple servers reading keys concurrently, we might get a scenario where two or more servers
try to read the same key from the database. How can we solve this concurrency problem?

   Servers can use KGS to read/mark keys in the database. KGS can use two tables to store keys: one for keys that are
not used yet, and one for all the used keys. As soon as KGS gives keys to one of the servers, it can move them to
the used keys table. KGS can always keep some keys in memory so that it can quickly provide them whenever a server
needs them.

   For simplicity, as soon as KGS loads some keys in memory, it can move them to the used keys table. This ensures each
server gets unique keys. If KGS dies before assigning all the loaded keys to some server, we will be wasting those
keys–which could be acceptable, given the huge number of keys we have.

   KGS also has to make sure not to give the same key to multiple servers. For that, it must synchronize (or get a lock
on) the data structure holding the keys before removing keys from it and giving them to a server.

   What would be the key-DB size? With base64 encoding, we can generate 68.7B unique six letters keys. If we need one
byte to store one alpha-numeric character, we can store all these keys in:

                6 (characters per key) * 68.7B (unique keys) = 412 GB.
    Isn’t KGS a single point of failure? Yes, it is. To solve this, we can have a standby replica of KGS. Whenever the
primary server dies, the standby server can take over to generate and provide keys.

Q) Can each app server cache some keys from key-DB?
       Yes, this can surely speed things up. Although in this case, if the application server dies before consuming all the
    keys, we will end up losing those keys. This can be acceptable since we have 68B unique six-letter keys.

Q) How would we perform a key lookup?
        We can look up the key in our database to get the full URL. If it’s present in the DB, issue an “HTTP 302 Redirect”
    status back to the browser, passing the stored URL in the “Location” field of the request. If that key is not
    present in our system, issue an “HTTP 404 Not Found” status or redirect the user back to the homepage.

Q) Should we impose size limits on custom aliases?
        Our service supports custom aliases. Users can pick any ‘key’ they
    like, but providing a custom alias is not mandatory. However, it is reasonable (and often desirable) to impose a
    size limit on a custom alias to ensure we have a consistent URL database. Let’s assume users can specify a maximum of
    16 characters per customer key (as reflected in the above database schema).
___________________________________
Data partitioning and Replication :
-----------------------------------
    To scale our DB we need to partition it so that it can store information about billions of URLs. We need to come up
with a partitioning scheme that would divide and store our data into different DB servers.

a. Range based partitioning :
-----------------------------
    We can store URLs in separate partitions based on the first letter of the hash key. Hence we save all our URLs
starting with letter 'A' or 'a' in one partition. This approach is called range based partitioning. We can even combine
certain less frequently occurring letters into one database partition. We should come up with a static partitioning
scheme so that we can always store/find a URL in a predictable manner.
    The main problem with this approach is that it can lead to unbalanced DB servers. For example we have decided to put
all URLs starting with letter 'E' into a DB partition, but later we realize that we have too many URLs that starts
with 'E'.

b. Hash based partitioning :
----------------------------
    In this scheme, we take a hash of the object we are storing. We then calculate which partition to use based upon the
 hash. In our case, we can take the hash of the ‘key’ or the short link to determine the partition in which we store the
 data object.

    Our hashing function will randomly distribute URLs into different partitions (e.g., our hashing function can always
map any ‘key’ to a number between [1...256]), and this number would represent the partition in which we store our object.
This approach can still lead to overloaded partitions, which can be solved by using Consistent Hashing.

_________
Caching :
---------
    We can cache URLs those are frequently accessed. We can use some off-the-shelf solution like Memcached, which can
store full URL with their respective hashes. The application server before hitting backend database, can quickly check
if the cache has the desired URL.

Q) Which cache eviction policy would best fit our needs?
        When the cache is full, and we want to replace a link with a newer/hotter URL, how would we choose? Least
    Recently Used (LRU) can be a reasonable policy for our system. Under this policy, we discard the least recently used URL
    first. We can use a Linked Hash Map or a similar data structure to store our URLs and Hashes, which will also keep
    track of the URLs that have been accessed recently.

    To further increase the efficiency, we can replicate our caching servers to distribute the load between them.

Q) How can each cache replica be updated?
    Whenever there is a cache miss, our servers would be hitting a backend database. Whenever this happens, we can
update the cache and pass the new entry to all the cache replicas. Each replica can update its cache by adding the new
entry. If a replica already has that entry, it can simply ignore it.

_______________
Load Balancer :
---------------
    We can add a Load balancing layer at three places in our system:

    Between Clients and Application servers
    Between Application Servers and database servers
    Between Application Servers and Cache servers

        Initially, we could use a simple Round Robin approach that distributes incoming requests equally among backend
    servers. This LB is simple to implement and does not introduce any overhead. Another benefit of this approach is
    that if a server is dead, LB will take it out of the rotation and will stop sending any traffic to it.

        A problem with Round Robin LB is that we don’t take the server load into consideration. If a server is
    overloaded or slow, the LB will not stop sending new requests to that server. To handle this, a more intelligent
    LB solution can be placed that periodically queries the backend server about its load and adjusts traffic based on
    that.

________________________
Purging and DB cleanup :
------------------------
        Should entries stick around forever or should they be purged? If a user-specified expiration time is reached,
        what should happen to the link?

        If we chose to actively search for expired links to remove them, it would put a lot of pressure on our database.
    Instead, we can slowly remove expired links and do a lazy cleanup. Our service will make sure that only expired
    links will be deleted, although some expired links can live longer but will never be returned to users.

        1. Whenever a user tries to access an expired link, we can delete the link and return an error to the user.

        2. A separate Cleanup service can run periodically to remove expired links from our storage and cache. This service
        should be very lightweight and can be scheduled to run only when the user traffic is expected to be low.

        3. We can have a default expiration time for each link (e.g., two years).
        After removing an expired link, we can put the key back in the key-DB to be reused.

    Should we remove links that haven’t been visited in some length of time, say six months? This could be tricky.
    Since storage is getting cheap, we can decide to keep links forever.
